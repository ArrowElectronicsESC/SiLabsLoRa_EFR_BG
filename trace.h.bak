#include <stdio.h>
#include <stdio.h>
#include <stdlib.h>

//#ifndef MBED_TRACE_MAX_LEVEL
//#define MBED_TRACE_MAX_LEVEL TRACE_LEVEL_DEBUG
//#endif

/** this print is some deep information for debug purpose */
//#define TRACE_LEVEL_DEBUG         0x10
/** Info print, for general purpose prints */
//#define TRACE_LEVEL_INFO          0x08
/** Error prints, which causes probably problems, e.g. out of mem. */
//#define TRACE_LEVEL_ERROR         0x02

//#if MBED_TRACE_MAX_LEVEL >= TRACE_LEVEL_DEBUG
#if defined NDEBUG
    #define tr_debug( format, ... )
#else
    #define tr_debug( format, args... )   fprintf( stderr, "%s::%s(%d) " format, __FILE__, __FUNCTION__,  __LINE__, ##args )
#endif
//#endif

//#if MBED_TRACE_MAX_LEVEL >= TRACE_LEVEL_INFO
#if defined NDEBUG
    #define tr_info( format, ... )
#else
    #define tr_info( format, args... )   fprintf( stderr, "%s::%s(%d) " format, __FILE__, __FUNCTION__,  __LINE__, ##args )
#endif
//#endif

//#if MBED_TRACE_MAX_LEVEL >= TRACE_LEVEL_ERROR
#if defined NDEBUG
    #define tr_error( format, ... )
#else
    #define tr_error( format, args... )   fprintf( stderr, "%s::%s(%d) " format, __FILE__, __FUNCTION__,  __LINE__, ##args )
#endif
//#endif


#ifndef __DEBUG
#define MBED_ASSERT(ignore)  ((void)0)
#else
#undef MBED_ASSERT
#undef __myassert
#define MBED_ASSERT(expression)  \
 ((void)((expression) ? 0 : (__myassert (#expression, __FILE__, __LINE__), 0)))

#define __assert(expression, file, line)  \
 __assfail("Failed assertion '%s' at line %d of '%s'.",    \
       expression, line, file)

static void
__assfail(const char *format,...)
{
   va_list arg;
   static char mystderr[0x80];
   va_start(arg, format);
   (void)vsprintf(&mystderr[0], format, arg);
   //while(1);
   va_end(arg);
}
#endif
